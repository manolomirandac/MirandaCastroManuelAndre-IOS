// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using System.IO;
using System.Threading;
using Newtonsoft.Json;
using System.Collections.Generic;
using PullToRefresh_11.Models;
using System.Linq;
using System.Threading.Tasks;

namespace PullToRefresh_11
{
    public partial class CitiesTableViewController : UITableViewController
    {

        #region Variables
        Dictionary<string, List<string>> Ciudades;

        UIRefreshControl refreshControl;
        string[] keys;
        #endregion
        #region Constructors

        public CitiesTableViewController(IntPtr handle) : base(handle)
        {
            //Mostar las ciudades que tiene por default la aplicacio(con acento)n


        }
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            // Perform any additional setup after loading the view, typically from a nib.
            InitializeComponents();

            Ciudades = Models.CitiesManager.SharedInstance.GetDefaultCities();
            if (Ciudades != null)
            {
                InvokeOnMainThread(() =>
                {
                    TableView.DataSource = this;
                    TableView.Delegate = this;
                    TableView.ReloadData();

                });
            }


        }
        #region userInteractions
        void RefreshControl_ValueChanged(object sender, EventArgs e)
        {
            //Aqui vamos a descargar los datos de internet

            //refreshControl.EndRefreshing();
            CitiesManager.SharedInstance.FetchCities();
        }
        #endregion
        #endregion

        #region TableView Data Source
        public override nint NumberOfSections(UITableView tableView)
        {

            return Ciudades.Keys.Count;
        }

        public override nint RowsInSection(UITableView tableView, nint section)
        {

            int valor = Ciudades.Values.ElementAt(int.Parse(section.ToString())).Count();
            return valor;
        }


        public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {

            var cell = TableView.DequeueReusableCell("cityCell", indexPath);
            cell.TextLabel.Text = Ciudades.Values.ElementAt(int.Parse(indexPath.Section.ToString()))[indexPath.Row].ToString();


            return cell;
        }
        public override string[] SectionIndexTitles(UITableView tableView)
        {
            return Ciudades.Keys.ToArray();

        }
        public override string TitleForHeader(UITableView tableView, nint section)
        {
            return Ciudades.Keys.ElementAt((int)section);
        }


        #endregion
        #region Cities Manager Events
        void CitiesManager_CitiesFetched(object sender, Models.CitiesEventArgs e)
        {
            Ciudades = e.Cities;
            InvokeOnMainThread(()=>  refreshControl.EndRefreshing());

            //Actualizo la tabla

        }
        public async void CitiesManager_FetchCitiesFailed(object sender, EventArgs e)
        {
            //Vamos a imprimir en consola si algo falla
            Console.WriteLine("Fallo men :'(");

            InvokeOnMainThread(() =>
            {
                refreshControl.EndRefreshing();
                TableView.ReloadData();
                showAlert(e.ToString());
            });
            

            //wait showAlert("Error",e.ToString(), "ok", null);
        }

                              
        #endregion

        #region Internal Functionallity

                               void showAlert(string title)
        {
            UIAlertController alert = UIAlertController.Create("Error", title, UIAlertControllerStyle.Alert);

            alert.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Default, null));

            PresentViewController(alert, animated: true, completionHandler: null);


        }
        void InitializeComponents(){

            CitiesManager.SharedInstance.CitiesFetched += CitiesManager_CitiesFetched;
            CitiesManager.SharedInstance.FetchCitiesFailed += CitiesManager_FetchCitiesFailed;
            Ciudades = CitiesManager.SharedInstance.GetDefaultCities();
            refreshControl = new UIRefreshControl();
            refreshControl.ValueChanged += RefreshControl_ValueChanged;
            TableView.RefreshControl = refreshControl;

            //Ciudades = CitiesManager.SharedInstance.GetDefaultCities();
            keys = Ciudades.Keys.ToArray();

        }
        #endregion




    }
}
